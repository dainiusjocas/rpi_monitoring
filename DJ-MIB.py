# PySNMP SMI module. Autogenerated from smidump -f python DJ-MIB
# by libsmi2pysnmp-0.1.3 at Sat May 18 17:52:50 2013,
# Python version sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Integer32, Integer32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")

# Objects

myCompany = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
testCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testCount.setDescription("A sample count of something.")
testDescription = MibScalar((1, 3, 6, 1, 4, 1, 42, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDescription.setDescription("A description of something")
piID = MibScalar((1, 3, 6, 1, 4, 1, 42, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piID.setDescription("A ID of RPI machine")
piHostname = MibScalar((1, 3, 6, 1, 4, 1, 42, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piHostname.setDescription("A hostname of RPI")
piIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piIP.setDescription("An IP address of RPI")
piNetmask = MibScalar((1, 3, 6, 1, 4, 1, 42, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piNetmask.setDescription("A netmask address of RPI")
piGateway = MibScalar((1, 3, 6, 1, 4, 1, 42, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piGateway.setDescription("A gateway of RPI")
piDNS = MibScalar((1, 3, 6, 1, 4, 1, 42, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piDNS.setDescription("A DNS. But only primary")
piCluster = MibScalar((1, 3, 6, 1, 4, 1, 42, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piCluster.setDescription("An ID of the cluster that this RPI belongs")
piCPULoad = MibScalar((1, 3, 6, 1, 4, 1, 42, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piCPULoad.setDescription("A current load of CPU")
piStorageState = MibScalar((1, 3, 6, 1, 4, 1, 42, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piStorageState.setDescription("A storage state of RPI")
piNetworkLoad = MibScalar((1, 3, 6, 1, 4, 1, 42, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piNetworkLoad.setDescription("A network Load")
piProcesses = MibScalar((1, 3, 6, 1, 4, 1, 42, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piProcesses.setDescription("A list of processes in the RPI")
piActivity = MibScalar((1, 3, 6, 1, 4, 1, 42, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piActivity.setDescription("A main activity of RPI")

# Augmentions

# Notifications

testTrap = NotificationType((1, 3, 6, 1, 4, 1, 42, 3)).setObjects(*() )
if mibBuilder.loadTexts: testTrap.setDescription("Test notification")

# Exports

# Objects
mibBuilder.exportSymbols("DJ-MIB", myCompany=myCompany, testCount=testCount, testDescription=testDescription, piID=piID, piHostname=piHostname, piIP=piIP, piNetmask=piNetmask, piGateway=piGateway, piDNS=piDNS, piCluster=piCluster, piCPULoad=piCPULoad, piStorageState=piStorageState, piNetworkLoad=piNetworkLoad, piProcesses=piProcesses, piActivity=piActivity)

# Notifications
mibBuilder.exportSymbols("DJ-MIB", testTrap=testTrap)

